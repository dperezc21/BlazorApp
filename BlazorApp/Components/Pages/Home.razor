@page "/"
@rendermode InteractiveServer

@inject ApiService ApiService

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<OptionButtons OnEnviar="SetOption" />

@if (items != null)
{
    <div class="grid-container">
        @foreach (var item in itemsFiltered)
        {
            <div class="grid-item">
                <strong>Codigo: @item.Codigo</strong><br />
                <div class="description">@item.Descripcion</div><br />
            
                @if(item.VActiva)
                {
                    <span class="text-status text-success">Activo</span>
                }
                else
                {
                    <span class="text-status text-danger">Inactivo</span>
                }
            </div>
        }
    </div>
}

@if(errorMessage != string.Empty) {
    <div class="alert alert-danger">@errorMessage</div>
} else 
@if (itemsFiltered.Count == 0 && !loadingData)
{
    <p>No hay elementos para mostrar.</p>
} else if (loadingData)
{
    <p>Cargando datos...</p>
}

@code {
    private List<InventoryTransaction> items = [];
    private List<InventoryTransaction> itemsFiltered = [];
    private readonly IConfiguration _config;
    private string errorMessage = string.Empty;
    private bool loadingData = true;
    public Home(IConfiguration config)
    {
        _config = config;
    }

    private async Task LoadData()
    {
        try {
             var url = _config["ApiURL"] ?? "";
            items = await ApiService.GetItemsAsync<InventoryTransaction>(url);
            itemsFiltered = items;
        } catch(HttpRequestException ex){ 
            Console.WriteLine($"Error HTTP: {ex.Message}");
            errorMessage = "No se pudo obtener la información del servidor.";
        }catch (Exception ex) {
            Console.WriteLine($"Error general: {ex.Message}");
            errorMessage = "Ocurrió un error inesperado.";
        }
       
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1);
            await LoadData(); 
            loadingData = false;
            StateHasChanged();
        }
    }

    public void SetOption(string option)
    {
        if (option == OptionStatus.All.ToString()) itemsFiltered = items; // Show all items
        else if (option == OptionStatus.Active.ToString()) itemsFiltered = items.Where(i => i.VActiva).ToList(); // Filter active items
        else if (option == OptionStatus.Inactive.ToString()) itemsFiltered = items.Where(i => !i.VActiva).ToList(); // Filter inactive items
    }
}